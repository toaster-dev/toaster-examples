name: Books API
environment: env-go.yml
tests:
  - name: List books
    steps:
      - type: http
        method: GET
        url: ${app}/books?limit=2
        assert:
          - result.statusCode: 200
          - result.statusText: OK
          - result.body.data:
              length: 2
          - result.body: {
              "data": [
                {
                  "id": "01918b20-ba3d-7ae5-acdc-66b0546643b1",
                  "title": "The Art of PostgreSQL",
                  "createdAt": "2025-08-25T22:00:23Z",
                  "updatedAt": "2025-08-25T22:00:23Z",
                },
                {
                  "id": "01918b20-7d9d-7794-9bf2-1a2607607acc",
                  "title": "The Pragmatic Programmer",
                  "createdAt": "2025-08-25T22:00:23Z",
                  "updatedAt": "2025-08-25T22:00:23Z",
                },
              ],
              "metadata": { "pagination": { "hasMore": true } },
            }

      - type: http
        method: GET
        url: ${app}/books?limit=2
        queryParams:
          lastID: 01918b20-7d9d-7794-9bf2-1a2607607acc
        assert:
          - result.statusCode: 200
          - result.statusText: OK
          - result.body.data:
              length: 1
          - result.body: {
              "data": [
                {
                  "id": "01918b1f-42f0-7cdc-b538-01496625b1e5",
                  "title": "Designing Data-Intensive Applications",
                  "createdAt": "2025-08-25T22:00:23Z",
                  "updatedAt": "2025-08-25T22:00:23Z",
                },
              ],
              "metadata": { "pagination": { "hasMore": false } },
            }

  - name: List books - invalid limit
    steps:
      - type: http
        method: GET
        url: ${app}/books?limit=invalid
        assert:
          - result.statusCode: 400
          - result.statusText: Bad Request
          - result.body: { "error": "invalid limit, must be an integer" }

  - name: List books - limit set to 0
    steps:
      - type: http
        method: GET
        url: ${app}/books?limit=0
        assert:
          - result.statusCode: 400
          - result.statusText: Bad Request
          - result.body: { "error": "invalid limit, must be greater than 0" }

  - name: List books - negative limit
    steps:
      - type: http
        method: GET
        url: ${app}/books?limit=-1
        assert:
          - result.statusCode: 400
          - result.statusText: Bad Request
          - result.body: { "error": "invalid limit, must be greater than 0" }

  - name: List books - invalid lastID
    steps:
      - type: http
        method: GET
        url: ${app}/books?lastID=invalid
        assert:
          - result.statusCode: 400
          - result.statusText: Bad Request
          - result.body: { "error": "invalid lastID, must be a valid UUID" }

  - name: Get book
    steps:
      - type: http
        method: GET
        url: ${app}/books/01918b20-ba3d-7ae5-acdc-66b0546643b1
        assert:
          - result.statusCode: 200
          - result.statusText: OK
          - result.body:  {
              "data": {
                "id": "01918b20-ba3d-7ae5-acdc-66b0546643b1",
                "title": "The Art of PostgreSQL",
                "createdAt": "2025-08-25T22:00:23Z",
                "updatedAt": "2025-08-25T22:00:23Z",
              },
            }

  - name: Get book - non-existent book
    steps:
      - type: http
        method: GET
        url: ${app}/books/019194db-e97b-7ba5-845f-0863ef0b7b75
        assert:
          - result.statusCode: 404
          - result.statusText: Not Found
          - result.body: { "error": "book not found" }

  - name: Get book - invalid ID
    steps:
      - type: http
        method: GET
        url: ${app}/books/invalid-id
        assert:
          - result.statusCode: 400
          - result.statusText: Bad Request
          - result.body: { "error": "invalid book ID, must be a valid UUID" }

  - name: Create book
    steps:
      - type: http
        method: POST
        url: ${app}/books/
        body: |
          {
            "title": "The Go Programming Language"
          }
        headers:
          Content-Type: application/json
        assert:
          - result.statusCode: 201
          - result.statusText: Created
          - result.body: {
              "data": {
                "id": *ignored,
                "title": "The Go Programming Language",
                "createdAt": *ignored,
                "updatedAt": *ignored,
              }
            }
